import pool from "../config/db.js";

/**
 * Enregistrer un mouvement sur le compte exploitant
 */
export const enregistrerMouvement = async (req, res) => {
  const client = await pool.connect();
  try {
    const {
      type_mouvement,
      montant,
      categorie,
      description,
      employe_id,
      reference_transaction
    } = req.body;

    await client.query('BEGIN');

    // Récupérer le solde actuel
    const compteResult = await client.query(
      'SELECT * FROM compte_exploitant ORDER BY compte_id DESC LIMIT 1'
    );

    let solde_avant = 0;
    if (compteResult.rows.length > 0) {
      solde_avant = compteResult.rows[0].solde;
    } else {
      // Créer le compte s'il n'existe pas
      await client.query(
        'INSERT INTO compte_exploitant (solde) VALUES (0)'
      );
    }

    const solde_apres = type_mouvement === 'entrée' 
      ? solde_avant + montant 
      : solde_avant - montant;

    // Vérifier si le solde est suffisant pour une sortie
    if (type_mouvement === 'sortie' && solde_apres < 0) {
      await client.query('ROLLBACK');
      return res.status(400).json({
        success: false,
        message: "Solde insuffisant pour effectuer cette opération"
      });
    }

    // Enregistrer le mouvement
    const mouvementResult = await client.query(
      `INSERT INTO mouvements_compte_exploitant 
       (type_mouvement, montant, categorie, description, 
        employe_id, reference_transaction, solde_avant, solde_apres)
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
       RETURNING *`,
      [
        type_mouvement, montant, categorie, description,
        employe_id, reference_transaction, solde_avant, solde_apres
      ]
    );

    // Mettre à jour le solde du compte
    await client.query(
      `UPDATE compte_exploitant 
       SET solde = $1, date_modification = NOW()
       WHERE compte_id = $2`,
      [solde_apres, compteResult.rows[0]?.compte_id || 1]
    );

    // Journalisation
    await client.query(
      `INSERT INTO journal_activites 
       (employe_id, action, details, entite_affectee, entite_id)
       VALUES ($1, 'mouvement_compte_exploitant', $2, 'mouvements_compte_exploitant', $3)`,
      [
        employe_id,
        JSON.stringify({
          type_mouvement,
          montant,
          categorie,
          solde_avant,
          solde_apres
        }),
        mouvementResult.rows[0].mouvement_id
      ]
    );

    await client.query('COMMIT');

    res.status(201).json({
      success: true,
      data: {
        mouvement: mouvementResult.rows[0],
        nouveau_solde: solde_apres
      },
      message: "Mouvement enregistré avec succès"
    });
  } catch (error) {
    await client.query('ROLLBACK');
    console.error("Erreur lors de l'enregistrement du mouvement:", error);
    res.status(500).json({
      success: false,
      message: "Erreur lors de l'enregistrement du mouvement"
    });
  } finally {
    client.release();
  }
};

/**
 * Obtenir l'historique des mouvements du compte exploitant
 */
export const getHistoriqueMouvements = async (req, res) => {
  const client = await pool.connect();
  try {
    const { date_debut, date_fin } = req.query;

    let query = `
      SELECT m.*, e.nom as employe_nom, e.prenom as employe_prenom
      FROM mouvements_compte_exploitant m
      LEFT JOIN employes e ON m.employe_id = e.employe_id
      WHERE 1=1
    `;
    const params = [];

    if (date_debut && date_fin) {
      query += ` AND m.date_mouvement BETWEEN $1 AND $2`;
      params.push(date_debut, date_fin);
    }

    query += ` ORDER BY m.date_mouvement DESC`;

    const result = await client.query(query, params);

    res.json({
      success: true,
      data: result.rows
    });
  } catch (error) {
    console.error("Erreur lors de la récupération de l'historique:", error);
    res.status(500).json({
      success: false,
      message: "Erreur lors de la récupération de l'historique"
    });
  } finally {
    client.release();
  }
};

/**
 * Obtenir le solde actuel du compte exploitant
 */
export const getSolde = async (req, res) => {
  const client = await pool.connect();
  try {
    const result = await client.query(
      'SELECT solde, date_modification FROM compte_exploitant ORDER BY compte_id DESC LIMIT 1'
    );

    if (result.rows.length === 0) {
      return res.json({
        success: true,
        data: {
          solde: 0,
          date_modification: new Date()
        }
      });
    }

    res.json({
      success: true,
      data: result.rows[0]
    });
  } catch (error) {
    console.error("Erreur lors de la récupération du solde:", error);
    res.status(500).json({
      success: false,
      message: "Erreur lors de la récupération du solde"
    });
  } finally {
    client.release();
  }
}; 