"use client"

import { useEffect, useState } from "react"
import { useAuth } from "@/lib/context/auth-context"
import { useRouter } from "next/navigation"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Plus } from "lucide-react"
import { MouvementsList } from "@/components/dashboard/compte-exploitant/mouvements-list"
import { AddMouvementDialog } from "@/components/dashboard/compte-exploitant/add-mouvement-dialog"
import { useToast } from "@/components/ui/use-toast"
import { compteExploitant } from "@/lib/api/compte-exploitant"
import { CompteExploitant } from "@/lib/api/types"

export default function CompteExploitantPage() {
  const { user } = useAuth()
  const router = useRouter()
  const { toast } = useToast()
  const [compteData, setCompteData] = useState<CompteExploitant | null>(null)
  const [dialogOpen, setDialogOpen] = useState(false)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (!user) {
      router.push("/login")
      return
    }

    if (user.role !== "admin") {
      router.push("/dashboard")
      return
    }

    const fetchCompteData = async () => {
      try {
        const data = await compteExploitant.getSolde()
        setCompteData(data)
      } catch (error) {
        console.error("Erreur lors de la récupération du solde:", error)
        toast({
          title: "Erreur",
          description: "Impossible de récupérer le solde du compte",
          variant: "destructive",
        })
      } finally {
        setLoading(false)
      }
    }

    fetchCompteData()
  }, [user, router, toast])

  const handleAddMouvement = async () => {
    try {
      const data = await compteExploitant.getSolde()
      setCompteData(data)
    } catch (error) {
      console.error("Erreur lors de la mise à jour du solde:", error)
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900" />
      </div>
    )
  }

  return (
    <div className="container mx-auto py-6 space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold">Compte Exploitant</h1>
        <Button onClick={() => setDialogOpen(true)}>
          <Plus className="mr-2 h-4 w-4" />
          Nouveau Mouvement
        </Button>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Solde Actuel</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-4xl font-bold">
            {compteData ? compteExploitant.formatAmount(compteData.solde) : "0 XOF"}
          </div>
          <p className="text-sm text-muted-foreground mt-2">
            Dernière mise à jour: {compteData ? new Date(compteData.date_modification).toLocaleString() : "-"}
          </p>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Historique des Mouvements</CardTitle>
        </CardHeader>
        <CardContent>
          <MouvementsList />
        </CardContent>
      </Card>

      <AddMouvementDialog
        open={dialogOpen}
        onOpenChange={setDialogOpen}
        onAddMouvement={handleAddMouvement}
      />
    </div>
  )
} 