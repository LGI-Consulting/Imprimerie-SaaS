"use client"

import { useEffect, useState } from "react"
import { DataTable } from "@/components/ui/data-table"
import { ColumnDef } from "@tanstack/react-table"
import { MouvementCompteExploitant } from "@/lib/api/types"
import { compteExploitant } from "@/lib/api/compte-exploitant"
import { format } from "date-fns"
import { fr } from "date-fns/locale"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { CalendarIcon, Loader2 } from "lucide-react"
import { cn } from "@/lib/utils"

export function MouvementsList() {
  const [mouvements, setMouvements] = useState<MouvementCompteExploitant[]>([])
  const [loading, setLoading] = useState(true)
  const [dateDebut, setDateDebut] = useState<Date>()
  const [dateFin, setDateFin] = useState<Date>()

  const columns: ColumnDef<MouvementCompteExploitant>[] = [
    {
      accessorKey: "date_mouvement",
      header: "Date",
      cell: ({ row }) => format(new Date(row.getValue("date_mouvement")), "dd MMM yyyy HH:mm", { locale: fr })
    },
    {
      accessorKey: "type_mouvement",
      header: "Type",
      cell: ({ row }) => (
        <Badge variant={row.getValue("type_mouvement") === "entrée" ? "default" : "destructive"}>
          {row.getValue("type_mouvement")}
        </Badge>
      )
    },
    {
      accessorKey: "montant",
      header: "Montant",
      cell: ({ row }) => compteExploitant.formatAmount(row.getValue("montant"))
    },
    {
      accessorKey: "categorie",
      header: "Catégorie"
    },
    {
      accessorKey: "description",
      header: "Description"
    },
    {
      accessorKey: "employe_nom",
      header: "Employé",
      cell: ({ row }) => `${row.getValue("employe_prenom")} ${row.getValue("employe_nom")}`
    },
    {
      accessorKey: "solde_apres",
      header: "Solde après",
      cell: ({ row }) => compteExploitant.formatAmount(row.getValue("solde_apres"))
    }
  ]

  const fetchMouvements = async () => {
    try {
      setLoading(true)
      const data = await compteExploitant.getHistorique(
        dateDebut?.toISOString(),
        dateFin?.toISOString()
      )
      setMouvements(data)
    } catch (error) {
      console.error("Erreur lors de la récupération des mouvements:", error)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchMouvements()
  }, [dateDebut, dateFin])

  return (
    <div className="space-y-4">
      <div className="flex gap-4 items-center">
        <Popover>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              className={cn(
                "w-[240px] justify-start text-left font-normal",
                !dateDebut && "text-muted-foreground"
              )}
            >
              <CalendarIcon className="mr-2 h-4 w-4" />
              {dateDebut ? format(dateDebut, "PPP", { locale: fr }) : "Date début"}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-auto p-0" align="start">
            <Calendar
              mode="single"
              selected={dateDebut}
              onSelect={setDateDebut}
              initialFocus
            />
          </PopoverContent>
        </Popover>

        <Popover>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              className={cn(
                "w-[240px] justify-start text-left font-normal",
                !dateFin && "text-muted-foreground"
              )}
            >
              <CalendarIcon className="mr-2 h-4 w-4" />
              {dateFin ? format(dateFin, "PPP", { locale: fr }) : "Date fin"}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-auto p-0" align="start">
            <Calendar
              mode="single"
              selected={dateFin}
              onSelect={setDateFin}
              initialFocus
            />
          </PopoverContent>
        </Popover>

        <Button
          variant="outline"
          size="icon"
          onClick={fetchMouvements}
          disabled={loading}
        >
          {loading ? (
            <Loader2 className="h-4 w-4 animate-spin" />
          ) : (
            <CalendarIcon className="h-4 w-4" />
          )}
        </Button>
      </div>

      <DataTable
        columns={columns}
        data={mouvements}
        filterColumn="description"
      />
    </div>
  )
} 