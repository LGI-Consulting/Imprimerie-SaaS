import api from './config';
import { CompteExploitant, MouvementCompteExploitant, CategorieDepense } from './types';

export interface CompteExploitantResponse {
  success: boolean;
  data?: CompteExploitant;
  message?: string;
}

export interface MouvementsCompteExploitantResponse {
  success: boolean;
  data?: MouvementCompteExploitant[];
  message?: string;
}

export interface CategoriesResponse {
  success: boolean;
  data?: CategorieDepense[];
  message?: string;
}

export const compteExploitant = {
  // Obtenir le solde actuel
  getSolde: async (): Promise<CompteExploitant> => {
    const response = await api.get<CompteExploitantResponse>('/compte-exploitant/solde');
    if (!response.data?.data) {
      throw new Error(response.data?.message || 'Erreur lors de la récupération du solde');
    }
    return response.data.data;
  },

  // Enregistrer un mouvement
  enregistrerMouvement: async (data: {
    type_mouvement: 'entrée' | 'sortie';
    montant: number;
    categorie: string;
    description?: string;
    employe_id: number;
    reference_transaction?: string;
  }): Promise<{ mouvement: MouvementCompteExploitant; nouveau_solde: number }> => {
    const response = await api.post<{ success: boolean; data: { mouvement: MouvementCompteExploitant; nouveau_solde: number } }>(
      '/compte-exploitant/mouvement',
      data
    );
    if (!response.data?.success) {
      throw new Error('Erreur lors de l\'enregistrement du mouvement');
    }
    return response.data.data;
  },

  // Obtenir l'historique des mouvements
  getHistorique: async (
    date_debut?: string,
    date_fin?: string
  ): Promise<MouvementCompteExploitant[]> => {
    const params = new URLSearchParams();
    if (date_debut) params.append('date_debut', date_debut);
    if (date_fin) params.append('date_fin', date_fin);

    const response = await api.get<MouvementsCompteExploitantResponse>(
      `/compte-exploitant/historique?${params.toString()}`
    );
    if (!response.data?.data) {
      throw new Error('Erreur lors de la récupération de l\'historique');
    }
    return response.data.data;
  },

  // Obtenir les catégories de dépenses
  getCategories: async (): Promise<CategorieDepense[]> => {
    const response = await api.get<CategoriesResponse>('/categories-depenses');
    if (!response.data?.data) {
      throw new Error('Erreur lors de la récupération des catégories');
    }
    return response.data.data;
  },

  // Fonctions utilitaires
  formatAmount: (amount: number): string => {
    return new Intl.NumberFormat('fr-FR', {
      style: 'currency',
      currency: 'XOF',
    }).format(amount);
  },
}; 